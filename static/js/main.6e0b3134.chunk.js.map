{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","InitialState","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodoId","id","isSelectedTodo","visableTodos","filterState","cleanQuery","trim","toLowerCase","completed","title","includes","length","className","map","classNames","onClick","currentTodoActions","handleSelect","TodoFilter","todosFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","loadUser","a","userId","loadedUser","useEffect","href","email","name","App","isLoad","setIsLoad","loadTodos","todosFromServer","error","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e0b3134.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'status/SET';\n  payload: Status;\n};\n\nconst setQuery = (payload: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload,\n});\n\nconst setStatus = (payload: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n} | null;\n\nconst InitialState = { query: '', status: 'all' } as State;\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = InitialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      } as State;\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      } as State;\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]) => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[] | null;\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state as Todo[];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedTodoId = useAppSelector(state => state.currentTodo?.id);\n  const isSelectedTodo = (id: number) => selectedTodoId === id;\n  const handleSelect = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const visableTodos = useAppSelector(state => {\n    const { todos, filter: filterState } = state;\n    const cleanQuery = filterState?.query.trim().toLowerCase() || '';\n\n    return todos.filter(todo => {\n      switch (filterState?.status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    }).filter(todo => todo.title.toLowerCase().includes(cleanQuery));\n  });\n\n  return (\n    <>\n      {visableTodos.length <= 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {visableTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visableTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': isSelectedTodo(id),\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-danger': !completed,\n                        'has-text-success': completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelect(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': !isSelectedTodo(id),\n                            'fa-eye-slash': isSelectedTodo(id),\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todosFilter = useAppSelector(state => state.filter);\n\n  const handleFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    dispatch(actions.setStatus(value as Status));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(actions.setQuery(value));\n  };\n\n  const handleRemoveQuery = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={todosFilter?.status}\n            onChange={handleFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={todosFilter?.query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {todosFilter?.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleRemoveQuery}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const removeTodo = () => dispatch(actions.removeTodo());\n\n  const loadUser = async () => {\n    if (todo) {\n      const loadedUser = await getUser(todo?.userId);\n\n      setUser(loadedUser);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && (<Loader />)}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {todo?.completed && (\n                <strong className=\"has-text-success\">Done by </strong>)}\n\n              {!todo?.completed && (\n                <strong className=\"has-text-danger\">Planned by </strong>)}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoad, setIsLoad] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isSelectedTodo = currentTodo !== null;\n\n  const loadTodos = async () => {\n    setIsLoad(true);\n    const todosFromServer = await getTodos();\n\n    await dispatch({ type: 'todos/SET', payload: todosFromServer });\n    setIsLoad(false);\n  };\n\n  useEffect(() => {\n    try {\n      loadTodos();\n    } catch (error) {\n      throw new Error('Error');\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n\n              {isLoad && (<Loader />)}\n              {!isLoad && (<TodoList />)}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelectedTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}